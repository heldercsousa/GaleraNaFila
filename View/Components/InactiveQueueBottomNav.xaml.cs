using Microsoft.Maui.Controls;
using MyKaraoke.View.Animations;
using System.Collections.ObjectModel;
using System.Windows.Input;

namespace MyKaraoke.View.Components
{
    public partial class InactiveQueueBottomNav : ContentView
    {
        #region Events (mantidos para compatibilidade)

        public event EventHandler LocaisClicked;
        public event EventHandler BandokeClicked;
        public event EventHandler NovaFilaClicked;
        public event EventHandler HistoricoClicked;
        public event EventHandler AdministrarClicked;

        #endregion

        #region Commands

        public ICommand LocaisCommand { get; private set; }
        public ICommand BandokeCommand { get; private set; }
        public ICommand NovaFilaCommand { get; private set; }
        public ICommand HistoricoCommand { get; private set; }
        public ICommand AdministrarCommand { get; private set; }

        #endregion

        #region Private Fields

        private bool _isInitialized = false;

        #endregion

        public InactiveQueueBottomNav()
        {
            try
            {
                InitializeComponent();
                InitializeCommands();
                SetupButtons();

                System.Diagnostics.Debug.WriteLine("InactiveQueueBottomNav refatorado inicializado com sucesso");

                // üéØ ESPEC√çFICO DO INACTIVE QUEUE: Executa anima√ß√µes automaticamente ao carregar
                // Este comportamento √© desej√°vel neste contexto espec√≠fico
                MainThread.BeginInvokeOnMainThread(async () =>
                {
                    await Task.Delay(100); // Pequeno delay para garantir que o layout esteja pronto
                    await ShowAsync(); // Inicia anima√ß√µes automaticamente APENAS para InactiveQueue
                });
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro na inicializa√ß√£o do InactiveQueueBottomNav refatorado: {ex.Message}");
                throw;
            }
        }

        #region Initialization

        private void InitializeCommands()
        {
            LocaisCommand = new Command(async () => await OnLocaisClickedAsync());
            BandokeCommand = new Command(async () => await OnBandokeClickedAsync());
            NovaFilaCommand = new Command(async () => await OnNovaFilaClickedAsync());
            HistoricoCommand = new Command(async () => await OnHistoricoClickedAsync());
            AdministrarCommand = new Command(async () => await OnAdministrarClickedAsync());
        }

        private void SetupButtons()
        {
            try
            {
                var buttons = new ObservableCollection<NavButtonConfig>
                {
                    // Locais - bot√£o regular com anima√ß√µes padr√£o (Fade + Translate)
                    new NavButtonConfig
                    {
                        Text = "Locais",
                        IconSource = "spot.png",
                        Command = LocaisCommand,
                        IsSpecial = false,
                        AnimationTypes = HardwareDetector.SupportsAnimations ? NavButtonAnimationType.ShowHide : NavButtonAnimationType.None,
                        IsAnimated = true
                    },
                    
                    // Bandok√™ - bot√£o regular com anima√ß√µes padr√£o (Fade + Translate)
                    new NavButtonConfig
                    {
                        Text = "Bandok√™",
                        IconSource = "musicos.png",
                        Command = BandokeCommand,
                        IsSpecial = false,
                        AnimationTypes = HardwareDetector.SupportsAnimations ? NavButtonAnimationType.ShowHide : NavButtonAnimationType.None,
                        IsAnimated = true
                    },
                    
                    // Nova Fila - bot√£o especial com TODAS as 3 anima√ß√µes (Fade + Translate + Pulse)
                    new NavButtonConfig
                    {
                        Text = "Nova Fila",
                        CenterContent = "+",
                        Command = NovaFilaCommand,
                        IsSpecial = true,
                        GradientStyle = SpecialButtonGradientType.Yellow,
                        SpecialAnimationTypes = SpecialButtonAnimationType.Fade | SpecialButtonAnimationType.Translate | SpecialButtonAnimationType.Pulse, // üéØ TODAS as 3 anima√ß√µes
                        IsAnimated = true
                    },
                    
                    // Hist√≥rico - bot√£o regular com anima√ß√µes padr√£o (Fade + Translate)
                    new NavButtonConfig
                    {
                        Text = "Hist√≥rico",
                        IconSource = "historico.png",
                        Command = HistoricoCommand,
                        IsSpecial = false,
                        AnimationTypes = HardwareDetector.SupportsAnimations ? NavButtonAnimationType.ShowHide : NavButtonAnimationType.None,
                        IsAnimated = true
                    },
                    
                    // Administrar - bot√£o regular com anima√ß√µes padr√£o (Fade + Translate)
                    new NavButtonConfig
                    {
                        Text = "Administrar",
                        IconSource = "manage.png",
                        Command = AdministrarCommand,
                        IsSpecial = false,
                        AnimationTypes = HardwareDetector.SupportsAnimations ? NavButtonAnimationType.ShowHide : NavButtonAnimationType.None,
                        IsAnimated = true
                    }
                };

                baseNavBar.Buttons = buttons;

                // Conecta evento do componente base
                baseNavBar.ButtonClicked += OnBaseNavBarButtonClicked;

                _isInitialized = true;
                System.Diagnostics.Debug.WriteLine("InactiveQueueBottomNav: 5 bot√µes configurados - Nova Fila com 3 anima√ß√µes (Fade + Translate + Pulse)");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro ao configurar bot√µes: {ex.Message}");
            }
        }

        #endregion

        #region Event Handlers

        private void OnBaseNavBarButtonClicked(object sender, NavBarButtonClickedEventArgs e)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"BaseNavBar: Bot√£o '{e.ButtonConfig.Text}' clicado");

                // Os commands j√° foram executados automaticamente pelo BaseNavBarComponent
                // Este evento √© apenas para logging adicional se necess√°rio
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro no evento base navbar: {ex.Message}");
            }
        }

        private async Task OnLocaisClickedAsync()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("Bot√£o Locais clicado no BottomNav refatorado - navegando para SpotPage");

                // Estrat√©gia 1: Usar ServiceProvider atrav√©s da p√°gina pai
                var parentPage = FindParentPage();
                if (parentPage != null)
                {
                    try
                    {
                        var serviceProvider = new View.ServiceProvider(
                            parentPage.Handler?.MauiContext?.Services ??
                            throw new InvalidOperationException("MauiContext n√£o dispon√≠vel")
                        );

                        var spotPage = serviceProvider.GetService<SpotPage>();

                        if (Application.Current?.MainPage is NavigationPage navPage)
                        {
                            await navPage.PushAsync(spotPage);
                            LocaisClicked?.Invoke(this, EventArgs.Empty);
                            return;
                        }
                        else if (parentPage.Navigation != null)
                        {
                            await parentPage.Navigation.PushAsync(spotPage);
                            LocaisClicked?.Invoke(this, EventArgs.Empty);
                            return;
                        }
                    }
                    catch (Exception serviceEx)
                    {
                        System.Diagnostics.Debug.WriteLine($"Erro ao usar ServiceProvider: {serviceEx.Message}");
                        // Continua para o fallback abaixo
                    }
                }

                // Estrat√©gia 2: Cria√ß√£o direta de SpotPage
                System.Diagnostics.Debug.WriteLine("Usando fallback - cria√ß√£o direta de SpotPage");
                var fallbackSpotPage = new SpotPage();

                if (Application.Current?.MainPage?.Navigation != null)
                {
                    await Application.Current.MainPage.Navigation.PushAsync(fallbackSpotPage);
                    LocaisClicked?.Invoke(this, EventArgs.Empty);
                }
                else if (parentPage?.Navigation != null)
                {
                    await parentPage.Navigation.PushAsync(fallbackSpotPage);
                    LocaisClicked?.Invoke(this, EventArgs.Empty);
                }
                else
                {
                    throw new InvalidOperationException("Nenhuma forma de navega√ß√£o dispon√≠vel");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro cr√≠tico na navega√ß√£o Locais: {ex.Message}");

                // Estrat√©gia 3: Feedback ao usu√°rio sobre o erro
                try
                {
                    var parentPage = FindParentPage();
                    if (parentPage != null)
                    {
                        await parentPage.DisplayAlert("Erro", "N√£o foi poss√≠vel navegar para a p√°gina de locais. Tente novamente.", "OK");
                    }
                }
                catch (Exception alertEx)
                {
                    System.Diagnostics.Debug.WriteLine($"Falha ao exibir alerta: {alertEx.Message}");
                }

                // Ainda assim invoca o evento para permitir tratamento customizado
                LocaisClicked?.Invoke(this, EventArgs.Empty);
            }
        }

        private async Task OnBandokeClickedAsync()
        {
            await Task.Run(() =>
            {
                System.Diagnostics.Debug.WriteLine("Bot√£o Bandok√™ clicado no BottomNav refatorado");
                BandokeClicked?.Invoke(this, EventArgs.Empty);
            });
        }

        private async Task OnNovaFilaClickedAsync()
        {
            try
            {
                // Para a anima√ß√£o quando o usu√°rio clica (mant√©m comportamento original)
                await StopNovaFilaAnimationAsync();

                await Task.Run(() =>
                {
                    System.Diagnostics.Debug.WriteLine("Bot√£o Nova Fila clicado no BottomNav refatorado");
                    NovaFilaClicked?.Invoke(this, EventArgs.Empty);
                });
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro no clique Nova Fila: {ex.Message}");
            }
        }

        private async Task OnHistoricoClickedAsync()
        {
            await Task.Run(() =>
            {
                System.Diagnostics.Debug.WriteLine("Bot√£o Hist√≥rico clicado no BottomNav refatorado");
                HistoricoClicked?.Invoke(this, EventArgs.Empty);
            });
        }

        private async Task OnAdministrarClickedAsync()
        {
            await Task.Run(() =>
            {
                System.Diagnostics.Debug.WriteLine("Bot√£o Administrar clicado no BottomNav refatorado");
                AdministrarClicked?.Invoke(this, EventArgs.Empty);
            });
        }

        #endregion

        #region Animation Methods (compatibilidade com c√≥digo existente)

        /// <summary>
        /// Inicia a anima√ß√£o do bot√£o Nova Fila automaticamente
        /// M√©todo p√∫blico para ser chamado pela view pai (mant√©m compatibilidade)
        /// Agora com as 3 anima√ß√µes: Show/Hide (Fade + Translate) + Pulse especial
        /// </summary>
        public async Task StartNovaFilaAnimationAsync()
        {
            try
            {
                if (!_isInitialized)
                {
                    System.Diagnostics.Debug.WriteLine("InactiveQueueBottomNav ainda n√£o inicializado, aguardando...");
                    await Task.Delay(100);
                }

                // S√≥ executa se o hardware suportar anima√ß√µes
                if (!HardwareDetector.SupportsAnimations)
                {
                    System.Diagnostics.Debug.WriteLine("üö´ Hardware n√£o suporta anima√ß√µes - Nova Fila animation BYPASS ativado");
                    return;
                }

                // Log do hardware para debug (mant√©m comportamento original)
                HardwareDetector.LogHardwareInfo();

                System.Diagnostics.Debug.WriteLine("Iniciando anima√ß√£o Nova Fila com 3 anima√ß√µes (Fade + Translate + Pulse) via BaseNavBarComponent");

                // Inicia anima√ß√µes especiais (automaticamente verifica se √© suportado pelo hardware)
                // Isso ir√° disparar: 
                // 1. Show (Fade + Translate) quando a navbar aparecer
                // 2. Pulse cont√≠nuo para call-to-action
                await baseNavBar.StartSpecialAnimations();

                System.Diagnostics.Debug.WriteLine("Anima√ß√£o Nova Fila iniciada com sucesso - 3 anima√ß√µes ativas");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro na anima√ß√£o Nova Fila BottomNav refatorado: {ex.Message}");
            }
        }

        /// <summary>
        /// Para a anima√ß√£o do bot√£o Nova Fila
        /// M√©todo p√∫blico para ser chamado pela view pai (mant√©m compatibilidade)
        /// </summary>
        public async Task StopNovaFilaAnimationAsync()
        {
            try
            {
                await baseNavBar.StopSpecialAnimations();
                System.Diagnostics.Debug.WriteLine("Anima√ß√£o Nova Fila parada no BottomNav refatorado");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro ao parar anima√ß√£o BottomNav refatorado: {ex.Message}");
            }
        }

        /// <summary>
        /// Verifica se a anima√ß√£o est√° rodando
        /// Propriedade para compatibilidade com c√≥digo existente
        /// </summary>
        public bool IsNovaFilaAnimationRunning
        {
            get
            {
                try
                {
                    // Como a anima√ß√£o agora √© gerenciada pelo componente SpecialNavButton,
                    // retornamos true se o navbar est√° vis√≠vel, animado E o hardware suporta anima√ß√µes
                    return _isInitialized && baseNavBar.IsVisible && baseNavBar.IsAnimated && HardwareDetector.SupportsAnimations;
                }
                catch
                {
                    return false;
                }
            }
        }

        /// <summary>
        /// Mostra a navbar com anima√ß√£o
        /// Isso ir√° disparar automaticamente as anima√ß√µes Fade + Translate de todos os bot√µes
        /// E depois o Pulse do bot√£o Nova Fila
        /// S√≥ executa se o hardware suportar anima√ß√µes (obedece HardwareDetector)
        /// 
        /// ESPEC√çFICO DO INACTIVE QUEUE: Este componente SEMPRE quer anima√ß√µes ao aparecer
        /// (diferente de outros componentes que podem preferir aparecer sem anima√ß√£o)
        /// </summary>
        public async Task ShowAsync()
        {
            try
            {
                // S√≥ executa anima√ß√µes se o hardware suportar (obedece a regra do HardwareDetector)
                if (HardwareDetector.SupportsAnimations)
                {
                    System.Diagnostics.Debug.WriteLine("üé¨ InactiveQueue: Iniciando anima√ß√µes da navbar - hardware adequado detectado");
                    await baseNavBar.ShowAsync();
                    System.Diagnostics.Debug.WriteLine("InactiveQueueBottomNav mostrada com anima√ß√£o - bot√£o Nova Fila com 3 anima√ß√µes ativas");
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("üö´ InactiveQueue: Hardware limitado - navbar mostrada sem anima√ß√µes (BYPASS ativo)");
                    baseNavBar.IsVisible = true;
                    // Em hardware limitado, apenas torna vis√≠vel sem anima√ß√µes (respeita HardwareDetector)
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro ao mostrar InactiveQueueBottomNav: {ex.Message}");
                // Fallback: apenas torna vis√≠vel
                baseNavBar.IsVisible = true;
            }
        }

        /// <summary>
        /// Esconde a navbar com anima√ß√£o
        /// </summary>
        public async Task HideAsync()
        {
            try
            {
                await baseNavBar.HideAsync();
                System.Diagnostics.Debug.WriteLine("InactiveQueueBottomNav escondida com anima√ß√£o");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro ao esconder InactiveQueueBottomNav: {ex.Message}");
            }
        }

        #endregion

        #region Helper Methods

        /// <summary>
        /// Encontra a p√°gina pai que cont√©m este ContentView
        /// Necess√°rio porque ServiceProvider.FromPage() espera uma Page
        /// </summary>
        private Page FindParentPage()
        {
            try
            {
                // Navega pela hierarquia visual para encontrar a Page pai
                Element current = this.Parent;

                while (current != null)
                {
                    if (current is Page page)
                    {
                        System.Diagnostics.Debug.WriteLine($"P√°gina pai encontrada: {page.GetType().Name}");
                        return page;
                    }
                    current = current.Parent;
                }

                // Se n√£o encontrou pela hierarquia, tenta pela MainPage atual
                var mainPage = Application.Current?.MainPage;
                if (mainPage != null)
                {
                    System.Diagnostics.Debug.WriteLine($"Usando MainPage como fallback: {mainPage.GetType().Name}");
                    return mainPage;
                }

                System.Diagnostics.Debug.WriteLine("Nenhuma p√°gina pai encontrada");
                return null;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Erro ao encontrar p√°gina pai: {ex.Message}");
                return Application.Current?.MainPage;
            }
        }

        #endregion

        #region Lifecycle Methods

        protected override void OnHandlerChanged()
        {
            base.OnHandlerChanged();

            if (Handler == null)
            {
                System.Diagnostics.Debug.WriteLine("InactiveQueueBottomNav handler removido");
            }
            else if (!_isInitialized)
            {
                // Tenta configurar bot√µes novamente se n√£o foi inicializado
                SetupButtons();
            }
            else
            {
                // üéØ ESPEC√çFICO DO INACTIVE QUEUE: Re-executa anima√ß√µes quando Handler estiver dispon√≠vel
                // Este comportamento √© desej√°vel para este componente espec√≠fico
                MainThread.BeginInvokeOnMainThread(async () =>
                {
                    await Task.Delay(50); // Pequeno delay para garantir que o layout esteja pronto
                    await ShowAsync(); // Re-inicia anima√ß√µes quando handler estiver pronto
                });
            }
        }

        protected override void OnBindingContextChanged()
        {
            base.OnBindingContextChanged();

            if (BindingContext == null)
            {
                // Para anima√ß√µes quando o contexto muda
                _ = Task.Run(StopNovaFilaAnimationAsync);
                System.Diagnostics.Debug.WriteLine("Anima√ß√£o parada devido a mudan√ßa de BindingContext");
            }
        }

        #endregion
    }
}